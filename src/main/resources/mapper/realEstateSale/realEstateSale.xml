<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kosa.realestate.realestates.repository.RealEstateSaleRepository">
	
	<select id="getRealEstateSaleCount" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM REAL_ESTATE_SALE A
		JOIN Real_Estate B ON A.REAL_ESTATE_ID = B.REAL_ESTATE_ID
		<if test="realEstateId != null">
			WHERE A.REAL_ESTATE_ID = #{realEstateId}
		</if>
	</select>

		<select id="estateCountByCriteria"  resultType="int">
		SELECT COUNT(*) 
		FROM REAL_ESTATE_SALE A
		JOIN REAL_ESTATE B ON A.REAL_ESTATE_ID = B.REAL_ESTATE_ID
		JOIN NEIGHBORHOOD C ON B.NEIGHBORHOOD_ID = C.NEIGHBORHOOD_ID
		JOIN DISTRICT D ON C.DISTRICT_ID = D.DISTRICT_ID
    	<where>
        	<if test="districtName != 0">
            	AND D.DISTRICT_ID = #{districtName}
        	</if>
        	<if test="neighborhoodName != null">
            	AND C.NEIGHBORHOOD_NAME= #{neighborhoodName}
        	</if>
        	<if test="salePrice != null">
            	AND A.SALE_PRICE BETWEEN #{salePrice.min} AND #{salePrice.max}
        	</if>
        	<if test="exclusiveArea != null">
        		AND A.EXCLUSIVE_AREA BETWEEN #{exclusiveArea.min} AND (#{exclusiveArea.max} )
        	</if>
    	</where>
	</select>


	<select id="selectRealEstateCount" resultType="int">
		SELECT COUNT(*) AS total_count
        from (
	        select       re.real_estate_id
	         	 , re.complex_name
	         	 , re.address
	         	 , re.address_street
	         	 , re.construction_year
				 , min(res.sale_price)  min_sale_price
				 , max(res.sale_price)  max_sale_price
				 , max(res.sale_price) keep (dense_rank last order by res.contract_date)     lately_sale_price
				 , to_char(to_date(max(res.contract_date) keep
				     (dense_rank last order by res.contract_date), 'YYYYMMDD'), 'YYYY.MM.DD')lately_contract_date
				 , max(res.exclusive_area) keep (dense_rank last order by res.contract_date) lately_exclusive_area
				 , max(res.floor) keep (dense_rank last order by res.contract_date)          lately_floor
	
	         	 , bt.building_type_name
	         	 , ne.neighborhood_id
	         	 , ne.neighborhood_name
	         	 , di.district_name
	         	 , ci.city_id
	         	 , ci.city_name
			  from real_estate             re
			  inner join real_estate_sale     res
			    	  on res.real_estate_id   = re.real_estate_id
			  inner join building_type        bt
		        	on bt.building_type_id  = re.building_type_id
			  inner join neighborhood         ne
		        	on ne.neighborhood_id   = re.neighborhood_id
			  inner join district             di
		        	on di.district_id       = ne.district_id
			  inner join city                 ci
		        	on ci.city_id           = di.city_id
			  <where>
			    <if test="districtName != 0">
			      AND di.DISTRICT_ID = #{districtName}
			    </if>
			    <if test="neighborhoodName != null">
			      AND ne.NEIGHBORHOOD_NAME = #{neighborhoodName}
			    </if>
			    <if test="salePrice != null">
			      AND res.SALE_PRICE BETWEEN #{salePrice.min} AND #{salePrice.max}
			    </if>
			    <if test="exclusiveArea != null">
			      AND res.EXCLUSIVE_AREA BETWEEN #{exclusiveArea.min} AND #{exclusiveArea.max}
			    </if>
			  </where>	
			  	  group by re.real_estate_id
				 , re.complex_name
				 , re.address
				 , re.address_street
				 , re.construction_year
				 , bt.building_type_id
				 , bt.building_type_name
				 , ne.neighborhood_id
				 , ne.neighborhood_name
				 , di.district_id
				 , di.district_name
				 , ci.city_id
				 , ci.city_name)
	</select>
	
<resultMap type="RealEstateWithSaleDTO" id="RealEstateWithSaleMapDTO">
	<association property="realEstate" javaType="RealEstateDTO">
        <id property="realEstateId" column="REAL_ESTATE_ID"/>
        <result property="neighborhoodId" column="NEIGHBORHOOD_ID"/>
        <result property="complexName" column="COMPLEX_NAME"/>
        <result property="address" column="ADDRESS"/>
        <result property="addressStreet"  column="ADDRESS_STREET"/>
        <result property="constructionYear" column="CONSTRUCTION_YEAR"/>
        <result property="lat" column="LAT"/>
        <result property="lng" column="LNG"/>
        <!-- <result property="buildingFlag" column="BUILDING_FLAG"/> -->
    </association>
    <association property="realEstateSale" javaType="RealEstateSaleDTO">
        <id property="salesId" column="SALES_ID"/>
        <result property="realEstateId" column="REAL_ESTATE_ID"/>
        <result property="salePrice" column="SALE_PRICE"/>
        <result property="contractDate" column="CONTRACT_DATE"/>
        <result property="registrationDate" column="REGISTRATION_DATE"/>
        <result property="buildingName" column="BUILDING_NAME"/>
        <result property="floor" column="FLOOR"/>
        <result property="exclusiveArea" column="EXCLUSIVE_AREA"/>
    </association>
    <association property="estateExtra" javaType="RealEstateExtraDTO">
    	<result property="cityName" column="CITY_NAME"/>
    	<result property="buildingTypeName" column="BUILDING_TYPE_NAME"/>
    	<result property="districtName" column="DISTRICT_NAME"/>
    	<result property="neighborhoodName" column="NEIGHBORHOOD_NAME"/>
    	<result property="allPrice" column="ALL_PRICE"/>
    </association>
</resultMap>

    <select id="selectRealEstateWithSales" resultMap="RealEstateWithSaleMapDTO" parameterType="map">
        SELECT 	A.REAL_ESTATE_ID,
        		A.NEIGHBORHOOD_ID,
        		A.COMPLEX_NAME,
        		A.ADDRESS,
        		A.ADDRESS_STREET,
        		A.CONSTRUCTION_YEAR,
        		A.LAT,
        		A.LNG,
         		B.SALES_ID,
         		B.REAL_ESTATE_ID,
         		B.SALE_PRICE,
         		B.CONTRACT_DATE,
         		NVL(TO_CHAR(B.REGISTRATION_DATE, 'YYYY-MM-DD'), ' ') AS REGISTRATION_DATE,
         		B.BUILDING_NAME,
         		B.FLOOR,
         		B.EXCLUSIVE_AREA
        From REAL_ESTATE A
        JOIN REAL_ESTATE_SALE B ON A.REAL_ESTATE_ID = B.REAL_ESTATE_ID 
		JOIN NEIGHBORHOOD C ON A.NEIGHBORHOOD_ID = C.NEIGHBORHOOD_ID
		<where>
			<if test="realEstateId != 0">
				A.REAL_ESTATE_ID = #{realEstateId}
			</if>

		</where>

    	ORDER BY B.CONTRACT_DATE DESC
    	OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
    </select>


	<select id="getAllDestrictId" resultType="hashmap">
		SELECT 
			district_id AS "districtId",
			district_name AS "districtName"
		FROM DISTRICT
	</select>
	
	<select id="getAllNeighborhood" resultType="hashmap" parameterType="int">
		SELECT B.NEIGHBORHOOD_NAME
		FROM DISTRICT A
		JOIN NEIGHBORHOOD B ON A.DISTRICT_ID = B.DISTRICT_ID
		WHERE A.DISTRICT_ID = #{destrictId}
	</select>
	
 	<select id="selectRealEstateWithSalesByCondition" resultMap="RealEstateWithSaleMapDTO">
    	SELECT A.*, B.*,  E.city_name, F.building_type_name, D.district_name, C.neighborhood_name, G.ALL_PRICE
		FROM REAL_ESTATE_SALE A
		JOIN REAL_ESTATE B ON A.REAL_ESTATE_ID = B.REAL_ESTATE_ID
		JOIN NEIGHBORHOOD C ON B.NEIGHBORHOOD_ID = C.NEIGHBORHOOD_ID
		JOIN DISTRICT D ON C.DISTRICT_ID = D.DISTRICT_ID
	 	JOIN CITY E ON E.city_id = D.city_id
       	JOIN building_type F ON F.building_type_id = b.building_type_id
       	JOIN (
            SELECT REAL_ESTATE_ID, 
            CONCAT(CONCAT(MIN(SALE_PRICE), '억 ~ '), CONCAT(MAX(SALE_PRICE), '억')) AS ALL_PRICE
             FROM REAL_ESTATE_SALE
            GROUP BY REAL_ESTATE_ID
        ) G ON A.REAL_ESTATE_ID = G.REAL_ESTATE_ID
    	<where>
        	<if test="districtName != 0">
            	AND D.DISTRICT_ID = #{districtName}
        	</if>
        	<if test="neighborhoodName != null">
            	AND C.NEIGHBORHOOD_NAME= #{neighborhoodName}
        	</if>
        	<if test="salePrice != null">
            	AND A.SALE_PRICE BETWEEN #{salePrice.min} AND #{salePrice.max}
        	</if>
        	<if test="exclusiveArea != null">
        		AND A.EXCLUSIVE_AREA BETWEEN #{exclusiveArea.min} AND (#{exclusiveArea.max} +1)
        	</if>
        	<if test=""></if>
    	</where>
    	ORDER BY A.CONTRACT_DATE DESC
    	OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select> 
	
	<select id="selectRealEstate" resultType="map">
	  SELECT
	    re.real_estate_id AS "realEstateId",
	    re.complex_name AS "complexName",
	    re.address AS "address",
	    re.address_street AS "addressStreet",
	    re.construction_year AS "constructionYear",
	    MIN(res.sale_price) AS "minSalePrice",
	    MAX(res.sale_price) AS "maxSalePrice",
	    MAX(res.sale_price) KEEP (DENSE_RANK LAST ORDER BY res.contract_date) AS "latelySalePrice",
	    TO_CHAR(TO_DATE(MAX(res.contract_date) KEEP (DENSE_RANK LAST ORDER BY res.contract_date), 'YYYYMMDD'), 'YYYY.MM.DD') AS "latelyContractDate",
	    MAX(res.exclusive_area) KEEP (DENSE_RANK LAST ORDER BY res.contract_date) AS "latelyExclusiveArea",
	    MAX(res.floor) KEEP (DENSE_RANK LAST ORDER BY res.contract_date) AS "latelyFloor",
	    bt.building_type_id AS "buildingTypeId",
	    bt.building_type_name AS "buildingTypeName",
	    ne.neighborhood_id AS "neighborhoodId",
	    ne.neighborhood_name AS "neighborhoodName",
	    di.district_id AS "districtId",
	    di.district_name AS "districtName",
	    ci.city_id AS "cityId",
	    ci.city_name AS "cityName"
	  FROM
	    real_estate re
	    INNER JOIN real_estate_sale res ON res.real_estate_id = re.real_estate_id
	    INNER JOIN building_type bt ON bt.building_type_id = re.building_type_id
	    INNER JOIN neighborhood ne ON ne.neighborhood_id = re.neighborhood_id
	    INNER JOIN district di ON di.district_id = ne.district_id
	    INNER JOIN city ci ON ci.city_id = di.city_id
	  <where>
	    <if test="districtName != 0">
	      AND di.DISTRICT_ID = #{districtName}
	    </if>
	    <if test="neighborhoodName != null">
	      AND ne.NEIGHBORHOOD_NAME = #{neighborhoodName}
	    </if>
	    <if test="salePrice != null">
	      AND res.SALE_PRICE BETWEEN #{salePrice.min} AND #{salePrice.max}
	    </if>
	    <if test="exclusiveArea != null">
	      AND res.EXCLUSIVE_AREA BETWEEN #{exclusiveArea.min} AND #{exclusiveArea.max}
	    </if>
	  </where>
	  GROUP BY
	    re.real_estate_id,
	    re.complex_name,
	    re.address,
	    re.address_street,
	    re.construction_year,
	    bt.building_type_id,
	    bt.building_type_name,
	    ne.neighborhood_id,
	    ne.neighborhood_name,
	    di.district_id,
	    di.district_name,
	    ci.city_id,
	    ci.city_name
	    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
	</select>
	
	<select id="getRealEstateDetail" parameterType="int" resultMap="RealEstateWithSaleMapDTO">
	    SELECT 
	        RS.SALES_ID,
	        RE.REAL_ESTATE_ID,
	        RE.NEIGHBORHOOD_ID,
	        RE.COMPLEX_NAME,
	        RE.ADDRESS,
	        RE.ADDRESS_STREET,
	        RE.CONSTRUCTION_YEAR,
	        RE.LAT,
	        RE.LNG,
	        RS.SALE_PRICE,
	        SUBSTR(RS.CONTRACT_DATE, 1, 4) || '-' || SUBSTR(RS.CONTRACT_DATE, 5, 2) || '-' || SUBSTR(RS.CONTRACT_DATE, 7, 2) AS CONTRACT_DATE, 
	        NVL(TO_CHAR(RS.REGISTRATION_DATE, 'YYYY-MM-DD'), ' - ') AS REGISTRATION_DATE,
	        RS.BUILDING_NAME,
	        RS.FLOOR,
	        RS.EXCLUSIVE_AREA
	    FROM 
	        REAL_ESTATE_SALE RS
	        JOIN REAL_ESTATE RE ON RS.REAL_ESTATE_ID = RE.REAL_ESTATE_ID
	    WHERE 
	        RS.SALES_ID = #{salesId}
	</select>
	
	<select id="getRealEstatePrice" parameterType="int" resultType="RealEstateSaleDTO">
	    <![CDATA[
	        SELECT
	            SALES_ID AS salesId,
	            REAL_ESTATE_ID AS realEstateId,
	            SALE_PRICE AS salePrice,
	            SUBSTR(CONTRACT_DATE, 1, 4) || '-' || SUBSTR(CONTRACT_DATE, 5, 2) || '-' || SUBSTR(CONTRACT_DATE, 7, 2) AS contractDate,
	            NVL(TO_CHAR(REGISTRATION_DATE, 'YYYY-MM-DD'), ' - ') AS registrationDate,
	            BUILDING_NAME AS buildingName,
	            FLOOR AS floor,
	            EXCLUSIVE_AREA AS exclusiveArea
	        FROM (
	            SELECT
	                SALES_ID,
	                REAL_ESTATE_ID,
	                SALE_PRICE,
	                CONTRACT_DATE,
	                REGISTRATION_DATE,
	                BUILDING_NAME,
	                FLOOR,
	                EXCLUSIVE_AREA
	            FROM REAL_ESTATE_SALE
	            WHERE REAL_ESTATE_ID = (
	                SELECT REAL_ESTATE_ID
	                FROM REAL_ESTATE_SALE
	                WHERE SALES_ID = #{salesId}
	            )
	            AND EXCLUSIVE_AREA = (
	                SELECT EXCLUSIVE_AREA
	                FROM REAL_ESTATE_SALE
	                WHERE SALES_ID = #{salesId}
	            )
	            ORDER BY CONTRACT_DATE DESC
	        )
	    ]]>
	</select>


	<select id="selectNewRealEstateSale" resultType="NewRealEstateSaleDTO">
			select res.sales_id
					 , res.sale_price
					 , res.floor
					 , res.building_name
					 , res.exclusive_area
					 , re.real_estate_id
					 , re.complex_name
					 , re.address
					 , re.address_street
					 , re.construction_year
					 , re.lat
					 , re.lng
					 , bt.building_type_name
					 , di.district_name
					 , ci.city_name
					 , di.district_name
					 , ne.neighborhood_name
			  from real_estate_sale     res
	inner join real_estate          re
					on re.real_estate_id    = res.real_estate_id
	inner join building_type        bt
				  on bt.building_type_id  = re.building_type_id
	inner join neighborhood         ne
					on ne.neighborhood_id   = re.neighborhood_id
	inner join district             di
					on di.district_id       = ne.district_id
	inner join city                 ci
					on ci.city_id           = di.city_id
		order by res.created_at desc
			 fetch first 5 rows only
	</select>

</mapper>