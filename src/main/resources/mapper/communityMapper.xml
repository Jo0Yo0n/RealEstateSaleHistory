<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.kosa.realestate.community.repository.CommunityRepository">


	<select id="postList" resultType="PostDTO">
		SELECT
		p.post_id AS "postId",
		p.content,
		p.user_id AS "userId",
		p.district_id,
		p.title,
		p.created_at,
		p.updated_at,
		p.post_view AS "postView",
		u.user_id AS "user.userId",
		u.nickname AS
		"nickname",
		d.district_id AS "districtId",
		d.district_name
		AS
		"districtName"
		FROM
		post p
		INNER JOIN
		users u ON p.user_id = u.user_id
		INNER JOIN
		district d ON p.district_id = d.district_id
		where p.isdeleted
		= 'N'
		ORDER BY
		p.created_at desc
	</select>


	<insert id="insertPost" parameterType="PostDTO">
		<selectKey keyProperty="postId" resultType="Long"
			order="BEFORE">
			SELECT TB_POST_SEQ.NEXTVAL AS postId FROM DUAL
		</selectKey>
		INSERT INTO Post
		(post_id, user_id, district_id, title, content)
		VALUES
		(#{postId}, #{userId}, #{districtId}, #{title}, #{content})
	</insert>



	<insert id="fileUpload" parameterType="FileMetaDataDTO">
		INSERT INTO FILE_META_DATA
		(post_id, file_name, file_path, file_type, file_size,file_origin_name)
		VALUES
		(#{postId}, #{fileName}, #{filePath}, #{fileType}, #{fileSize},
		#{fileOriginName})
	</insert>

	<select id="communityCard" resultType="PostDTO"
		parameterType="long">
		SELECT
		p.post_id AS postId,
		p.content,
		p.user_id AS userId,
		p.district_id AS districtId,
		p.title,
		TO_CHAR(p.created_at, 'yyyy-mm-dd
		hh24:mi:ss'),
		TO_CHAR(p.updated_at, 'yyyy-mm-dd hh24:mi:ss'),
		p.post_view AS postView,
		u.user_id AS userId,
		u.nickname AS nickname,
		d.district_id AS districtId,
		d.district_name AS districtName
		FROM
		post p
		INNER JOIN
		users u ON p.user_id = u.user_id
		INNER JOIN
		district d ON
		p.district_id = d.district_id
		WHERE
		p.post_id = #{postId}
	</select>


	<select id="selectFiles" parameterType="long"
		resultType="FileMetaDataDTO">
		select file_name fileName
		, file_id fileId
		, file_path
		filePath
		, file_type fileType
		, file_size fileSize
		, file_origin_name
		fileOriginName
		, upload_date uploadDate
		from file_meta_data
		where post_id
		= #{postId}
	</select>

	<delete id="deleteFile" parameterType="int">
		DELETE FROM FILE_META_DATA
		WHERE file_id = #{fileId}
	</delete>

	<update id="postUpdate" parameterType="PostDTO">
		update post
		set
		title =
		#{title},
		content = #{content},
		district_id = #{districtId}
		where
		post_id=#{postId}
	</update>

	<select id="selectPostInfo" parameterType="Long"
		resultType="PostInfoDTO">
		SELECT
		post_id AS postId,
		title,
		content,
		TO_CHAR(created_at,
		'yyyy-mm-dd hh24:mi:ss')
		FROM post
		WHERE post_id = #{postId}
	</select>



	<update id="postDelete" parameterType="long">
		update post set isdeleted
		= 'Y'
		where post_id = #{postId}
	</update>


	<select id="selectNewPostList" resultType="PostInfoDTO">
		select post_id
		, title
		, content
		, to_char(created_at, 'yyyy-mm-dd hh24:mi:ss') created_at
		from post
		where isdeleted = 'N'
		order by created_at desc
		fetch first 5
		rows only
	</select>


	<select id="loadPostsByDistrict" parameterType="int"
		resultType="PostDTO">
		SELECT
		p.post_id AS "postId",
		p.content,
		p.user_id AS
		"userId",
		p.district_id,
		p.title,
		p.created_at,
		p.updated_at,
		p.post_view
		AS "postView",
		u.user_id AS
		"user.userId",
		u.nickname AS "nickname",
		d.district_id AS
		"districtId",

		d.district_name AS "districtName"
		FROM
		post p
		INNER JOIN
		users u ON
		p.user_id = u.user_id
		INNER JOIN
		district d ON
		p.district_id =
		d.district_id
		where p.isdeleted
		= 'N'and p.district_id=
		#{districtId}
		ORDER
		BY
		p.created_at desc
	</select>

	<insert id="updateViewCount" parameterType="long">
		update post
		set
		POST_VIEW = POST_VIEW + 1
		where post_id=#{postId}
	</insert>

	<select id="loadPostsByView" parameterType="int"
		resultType="PostDTO">
		SELECT
		p.post_id AS "postId",
		p.content,
		p.user_id AS
		"userId",
		p.district_id,
		p.title,
		p.created_at,
		p.updated_at,
		p.post_view
		AS "postView",
		u.user_id AS "user.userId",
		u.nickname AS
		"nickname",
		d.district_id AS "districtId",
		d.district_name AS
		"districtName"
		FROM
		post p
		INNER JOIN
		users u ON p.user_id = u.user_id
		INNER JOIN
		district d
		ON p.district_id = d.district_id
		where p.isdeleted= 'N'and
		p.district_id= #{districtId}
		ORDER BY
		p.post_view desc
	</select>

	<select id="postViewList" resultType="PostDTO">
		SELECT
		p.post_id AS
		"postId",
		p.content,
		p.user_id AS "userId",
		p.district_id,
		p.title,
		p.created_at,
		p.updated_at,
		p.post_view AS "postView",
		u.user_id AS
		"user.userId",
		u.nickname AS
		"nickname",
		d.district_id AS "districtId",
		d.district_name
		AS
		"districtName"
		FROM
		post p
		INNER JOIN
		users u ON
		p.user_id = u.user_id
		INNER JOIN
		district d ON p.district_id =
		d.district_id
		where p.isdeleted
		= 'N'
		ORDER BY
		p.post_view DESC
	</select>

	<select id="searchPosts" parameterType="String"
		resultType="PostDTO">
		SELECT
		p.post_id AS "postId",
		p.content,
		p.user_id AS "userId",
		p.district_id,
		p.title,
		p.created_at,
		p.updated_at,
		p.post_view AS "postView",
		u.user_id AS "user.userId",
		u.nickname AS "nickname",
		d.district_id AS "districtId",
		d.district_name AS "districtName"
		FROM
		post p
		INNER JOIN users u ON p.user_id = u.user_id
		INNER JOIN district d ON p.district_id = d.district_id
		WHERE
		p.isdeleted = 'N'
		AND (p.title LIKE '%' || #{searchText} || '%'
		OR p.content LIKE '%' || #{searchText} || '%')
		ORDER BY
		p.post_view DESC

	</select>

	<select id="getPostsByUserId" resultType="UserPostDTO">
		SELECT
		p.post_id,
		p.content,
		p.user_id,
		p.district_id,
		p.title,
		p.created_at,
		p.updated_at,
		p.post_view,
		u.nickname,
		d.district_name,
		c.city_name
		FROM
		post p
		INNER JOIN
		users u ON p.user_id = u.user_id
		INNER JOIN
		district d ON p.district_id
		= d.district_id
		INNER JOIN
		city c ON c.city_id = d.city_id
		where
		p.isdeleted = 'N' and p.user_id =
		#{userId}
		ORDER BY
		p.created_at desc
		offset #{offset} rows fetch next #{pageSize} rows only
	</select>

	<select id="getTotalPostsCountByUserId" resultType="int">
		select
		count(*)
		from post
		where isdeleted = 'N' AND user_id = #{userId}
	</select>

	<!-- 게시글 검색 쿼리 설정 -->
	<select id="searchOptionPosts" parameterType="map"
		resultType="PostDTO">
		SELECT
		p.post_id AS "postId",
		p.content,
		p.user_id AS
		"userId",
		p.district_id,
		p.title,
		p.created_at,
		p.updated_at,
		p.post_view
		AS "postView",
		u.user_id AS "user.userId",
		u.nickname AS "nickname",
		d.district_id AS "districtId",
		d.district_name AS "districtName"
		FROM
		post p
		INNER JOIN
		users u ON p.user_id = u.user_id
		INNER JOIN
		district d
		ON p.district_id = d.district_id
		WHERE
		d.district_id = #{districtId}
		AND
		(p.title LIKE '%' || #{searchText} || '%'
		OR p.content LIKE '%' ||
		#{searchText} || '%')
		ORDER BY p.created_at DESC
	</select>

</mapper>